{#create_simple_things}
# Create simple things in small steps.

{icon: quote-left}
B> ## The most fundamental problem in software development is complexity. There is only one basic way of dealing with complexity: divide and conquer.

B> ### -- Bjarne Stroustrup

## Create Simple Things

What is a simple thing?

Simple might indicate something that has few components or something that is easy to understand. Simple might also indicate lacking intellect or being gullible. As we are talking about code, which is non-sentient, the former makes more sense.


So we might say code that is simple is code with few components and is easy to understand. But I think this definition lacks something.

This is the essence of well composed solutions - they are comprised of small components that are easy to understand.

But what does it mean for code to be small?

And what does it mean for code to be easy to understand?


Kent Beck[^^KentBeck], creator of jUnit and a member of the team that created Extreme Programming (XP), describes Simple Design using 4 rules[^^SimplicityRules]:
1. Passes all the tests.
1. Express every idea we need to express.
1. Duplicates no behavior or configuration.
1. Has no superfluous parts.

[^^KentBeck]: “Kent Beck.” Wikipedia. Wikimedia Foundation, February 7, 2020. https://en.wikipedia.org/wiki/Kent_Beck.

[^^SimplicityRules]: Cunningham, Ward, Kent Beck, and Ron Jeffries. “XP Simplicity Rules.” wiki.c2.com, November 12, 2014. https://wiki.c2.com/?XpSimplicityRules.



Simple things are not often easy to create. In fact, we often start with a complicated thing and then break it apart into simple pieces.

## In Small Steps
