# Introduction #

# Allow myself to introduce ... myself.

### Hello.

My name is Doc Norton and I make software.

I've been making software of some form or another since 1982. 1982 is when my friends Matt Craig and Steve Linder used to hang out with me in the school library after school a couple of days per week. We'd pull a cassette tape out of its hard plastic case and gently place the tape into the magnetic tape reader attached to the school's one and only available computer - the magnificent Tandy Model II. A minute or two later, our creations would be ready for us to review, modify, and run.

We wrote a lot of the classics - Print my name a hundred times, paper fortune teller simulator, and dozens of our own mini Zork variants.

We were using BASIC. No teacher. No mentor. Just the three of us and a BASIC language reference.

### We were nerds. And we didn't care.
It was fun. We were nerds. And we didn't care. We were making things. Building new worlds. Creating.

No. It was more than fun. It was awesome.

As happens in life, Matt, Steve, and I eventually drifted apart. We developed other interests like sports, science, and music. We made new friends who shared those interests. And we spent less time together as we got older. Eventually, we each went to a different college.

But, during that year, seeds were planted for me. I learned that I liked creating. I liked solving problems. Despite my lackluster interest in school, I really enjoyed being challenged and learning new things when it came to computers and writing code.

Computers became a mainstay in my life. I got a computer for a birthday, picked up a 300 baud coupling modem from a trade show, and a banana gorilla dot matrix color printer for Christmas. When I wasn't running cross-country (I was the one who got into sports), you could probably find me on a dial-up bulletin board conversing with other geeks and learning more about computers - especially writing software.

### My hobby becomes my profession

My hobby transformed into my career as I took on new challenges and learned new languages. BASIC, Pascal, Fortran, COBOL, RPG, and WANG VS Batch (it's a language) were my first few languages.

I wrote my first professional (paid for) application in COBOL and WANG VS Batch in 1989. It was a relatively simple application that automated away a lot of the tedium involved in being a night batch operator in a computer room for a large law firm. 

I'd been hired to essentially lift heavy drives in and out of casings and load tapes onto high reels in order to run nightly backups on a set of WANG VS mini computers. I was a perfect fit - I was strong, tall, and geeky.

The job was painfully repetitive. I'd load a drive and/or the first tape in a series. I'd then fill in a rather detailed screen to identify the contents of the backup and the label of the tape reel. An hour later, the tape would be full and I'd need to load the next tape. This involved filling in all of the same data and the new tape reel label. In most cases, the tape reels were labeled in a sequence.

I had to follow this sequence for four mini computers. Each one took about 12 minutes to complete the sequence. So I was moving from terminal to terminal, filling in tediously repetitive screens with 95% identical data over and over again. For every hour of work, I had approximately 10 minutes where I wasn't swapping a tape or standing at a terminal keying in data.

After a few weeks of this mind-numbing work, I started writing an application that would fill in all of the repetitive data for me. I refined the application over the next few months. Eventually, I'd automated away almost all of the data entry. Now the first system would take about 15 minutes to set up and the rest of the systems would each take about five minutes. I could load the first run for all four systems in 30 minutes and every subsequent run in about 20 minutes. This left me with about 30 minutes out of every hour where I could study computers and programming.

In that spare time, I learned Assembler for the PC and spent about 6 months writing low level disk editing software and TSR-style utilities before I grew frustrated with how slow Assembler was to write in and I moved on to C.

At the time, I was using Microsoft's IDE and compiler. It was a logical jump from Microsoft's Macro Assembler tools. But my friend and colleague, Joe Sladick, suggested I try Borland's IDE instead. It ran faster, had a better debugger, and could be run on OS/2, which I was also playing with at the time. Borland's Turbo C++ came as part of the package deal and it wasn't long before I was trying to figure out this Object Oriented stuff.

### An interesting opportunity
During that same time period, the law firm that Joe and I were working for needed some software written quickly. Their docketing department had been running on an old mini computer that was out of warranty, dying, and proprietary. They needed a replacement. And fast.

Joe pitched them on FoxPro as a possible solution. This was not viable, they declared. It ran on a PC and they were a serious law firm. Very large. Very prestigious. Very professional. Real software ran on real computers. And real computers didn't fit on desks.

Besides, FoxPro was brand new. Still in early release, FoxPro was Fox Software's move from FoxBASE, which was procedural, to an object oriented implementation. If we were going to write something for a PC, which was silly talk, why wouldn't we use a real language, like C, from a real company, like Microsoft.

Joe was persuasive and they agreed to allow him to work on it as a plan B while they figured out a real solution. They would allow him to play around, but he had 3 months. IT Management had a due date of 3 months for completion of their comprehensive requirements. If Joe's little experiment met the requirements, it would be considered for final evaluation.

Joe invited me to join him. We could not allow it to disrupt our core duties. This was a "spare time" initiative. It was going to be extra hours, the odds were against us, and we had little sincere support from management. Oh, and the customer wasn't all that interested either.

I jumped at the opportunity.

### FoxPro is awesome
It was weird to move back and forth from the Object Orientation and strictness of C++ to the procedural orientation and lack of restriction of FoxPro. These were such different worlds. While I enjoyed them both, I grew to love the freedom and speed of developing in FoxPro. 

Loose scopes and looser types let me do some crazy things. And since it was interpreted, I could write FoxPro in FoxPro. On the fly. I wrote software that wrote new software and executed it at run time in order to dynamically modify its own behavior. I'd never really seen anything like this. I was able to build some pretty cool stuff. If I'm being honest - some of it was a bit too clever.

### Building in small pieces
We built the docketing system in small pieces. We didn't iterate necessarily, but we did deliver incrementally. And Joe was a stickler for quality. He didn't mind the cleverness now and then, but he was quite annoyed with long functions or procedures. So I quickly developed a habit of writing small independent things and piecing them together.

While our managers were holding meetings to document requirements and combing through the existing system to devise a comprehensive feature for feature comparison, we were building a replacement one small step at a time. We started with the core work; the things they did every day, multiple times per day. We'd hand draw a few screen mock-ups on paper and talk them over with the docketing department. With their nod, we'd go build that screen in a matter of days and bring it back to them for feedback.

### Getting customer feedback
Quite often, we'd make a mock-up based on their existing system. They'd take a look at it and nod their heads. And the docketing manager would give her approval.

"Yes. Uh-Huh. That's right. That looks good. Just like the existing system. Let's go with this.", she'd say.

So we'd confirm, "Perfect. So we'll build it just like this. And you want this button here to load the court calendar on the next screen, right? Just like in the existing system."

"Well....", she'd reply with hesitation in her voice, "I never really liked the way that functioned. Half the stuff I need for the case is on the prior screen. I keep a notepad next to my desk to write down the key case information so that I can refer to it while looking at the court calendar."

"Interesting.", Joe would say, "So, if you could design it differently, what would that look like?", and he'd slide her a legal pad and pencil.

45 minutes later, we'd have a new screen design or maybe a few screens. And we'd go off and build those. Always focusing on specific pieces of functionality that solved a targeted core business problem. If the screen design had summary data or other stuff that was useful, but not critical, we didn't build it yet.

### Automating manually intensive changes
These incremental changes meant that the database structure would need to change to support new requirements. Changing the database meant we risked losing data. So we became adept at writing short install scripts that would back everything up, migrate the old data to the new structure and install the new application. Boom!

In a matter of a couple months, we'd developed new scheduling screens that the docketing department really loved. These new screens were much easier to use. They didn't want to wait. So we devised a way to marshal data back and forth between the mini and the PC which allowed them to use both systems.

### A small victory
Then things changed. The docketing department didn't want to write any more detailed requirements. They didn't want to create comprehensive feature lists. They wanted to keep building the application in this incremental way.

IT Management warned them of the risks. This was not how corporate software was written. This was a prototype, at best. Requirements would surely be missed. Documentation would not exist! It would be chaos!! We at least needed a step by step plan with due dates and resource allocations and Gantt charts.

But the docketing team was having none of it. They were able to see regular progress in the form of working software. They could make the call on whether or not a feature got developed now or later and they had near complete control over the design.

Plan B became Plan A.

### Building Together
This meant we could focus on the software full time. We set up a war room where Joe and I worked together, side by side. The war room was just outside the docket department so we could interact more often.

We were in near constant communication. We did field visits to the courts to see how things really worked. We did docket runs with couriers to see how what we did impacted their lives. It was fast paced. It was intense. It was fun.

### Finding defects
When we first started writing the code, we were able to test all new functionality on our machines before showing it to anyone else. Now that we were moving faster, sitting together, and dealing with a larger system, our customer was more exposed to the raw first drafts. This was concerning for them. It seemed there were a lot more bugs than they remembered.
They weren't wrong. We were spending more and more time fixing strange errors and manually testing. And we were spending less and less proportional time coding.

### So many issues
Docketing clerks picked up a lot of the testing, which helped, but now they were seeing pre-release in detail and were starting to wonder if maybe the solution was too buggy. And, as the solution grew, it became even harder to diagnose and fix the issues. Due, in no small part, to Fox's loose scopes and looser types.

### FoxPro is awful
FoxPro allowed you to declare a variable by use. Simply assign a value to a variable and you've declared that variable. No need to waste a line of code merely declaring a variable. Think of how much faster you could code by not declaring variables. Whoah.

FoxPro also had an interesting concept of scope. There were local, private, and global variables. Local was scoped strictly to the method that declared it. Private variables were accessible by the declaring method and any methods it called. And a global variable was available to anything and everything once it was declared.

Local and global variables needed to be explicitly declared as such. Any variable that was declared by use was automatically private. That meant that any method lower in the call chain of the declaring method also had access to that variable.

#### Scope in FoxPro
local
: Scoped strictly to the declaring method.
: Must be explicitly declared.

private
: Scoped to the declaring method and any methods subsequent in the declaring method's call stack.
: May be explicitly declared.
: Declaration by use creates a private variable.

global
: Scoped to the entire application. Once declared, global variables are accessible by any method anywhere in the code.
: Must be explicitly declared.

##### An example of FoxPro's scope issues
Now let's imagine we both write a method. Yours calculates sales tax on an order and mine calculates the entire invoice, including tax. I will, of course, call your method to calculate the tax.

I have a variable that holds the subtotal. I've named it subtotal. Because that makes sense to me. I get order data, calculate the subtotal, and then pass the order data to you for tax calculation. I then add the taxes to the subtotal to get the order total. And all is well.

CODE BELONGS RIGHT HERE!!!

~~~
FUNCTION calcInvoice(INT invoiceNumber)
  SELECT * from OrderData where invoice = invoiceNumber INTO CURSOR csrInvoice
  
  SELECT csrInvoice
  SCAN
    subtotal = subtotal + OrderData.cost
  ENDSCAN

  RETURN subtotal
ENDFUNC
~~~

Fast forward a few months and the tax rules have changed. Now, you have to calculate different tax rates for different types of products. So you subtotal taxes for product types into a variable you call subtotal. Because that makes sense to you.

And now my method starts intermittently returning wrong information. When it is wrong, the total is always less than it should be. Never over. Always under.

As it turns out, I declared the variable subtotal by use. And that means that when I call your method, the variable subtotal is in scope for you. I didn't pass it to you, but you still have access to it.

As you might recall, you also called your variable subtotal. And it turns out that you also declared subtotal by use. Or at least you thought you did. But when your method gets called by my method, the subtotal you are referencing is actually mine. You aren't declaring by use because there is already a subtotal variable in scope for you. You are simply using it.

In the process of calculating the tax on the order, you overwrite my subtotal. When I finish my calculation, I am using whatever subtotal you last calculated. Even though you didn't return that value to me. You modified a variable I declared by use and was thereby in scope for your method when called by mine.

Sometimes, your subtotal and my subtotal match because all the items on the order have the same tax rate. And sometimes, your subtotal is less than mine because you subtotal by tax type and re-use the variable for each tax type. Hence the intermittent failure and the low total for every failure.

You can imagine how this could cause very strange behaviors, especially if the method overwriting your private variables is three or four layers away in the call stack and is called conditionally. You get intermittent errors that have a root cause in a place that is no longer in the stack by the time the error occurs.

#### Types in FoxPro
And there were other issues with type. You could, for example, initialize a variable as an integer and then later assign a string to that same variable. You'd get no runtime errors when you changed types. But you might get an error when you later tried to execute a mathematical operator on a string that you expected to be an integer.

Imagine I have a method that will tell you the date that is N days from now. You pass it a number of days and I return to you the date that is that many days from today. I return it as a DATE(). You find this useful and you use it with success.

I later decide that my method doesn't need to return a DATE(). Every time I call it, I transform the date into a string format. So, to reduce duplication, I change the method to return a string and I change all the methods that I know of that call the days from now method. I manually test all my changes. All is well.

That is until your area of the application bombs because it is trying to do date math on a string.

Whoops.

### Automated tests
So we laid down some rules.

First, no private variables. It didn't matter if it was convenient on occasion. It was trouble. So make them local and handle them properly. This also meant no declaration by use, which required a lot of clean-up.

Second, before you change the return type of a method, make sure you know all the places where it is called. Not just the places you personally wrote. Consider wrapping the type change in another method rather than changing the base method. You might have missed where some dynamic code is calling the base method (remember that clever stuff?).

Third, Test more. Test better. Test faster.

Testing was already difficult. The application kept getting bigger and bigger. There was more and more to test.

Joe was a fan of SmallTalk and people in that community were facing similar challenges as they too had an interpreted language that was loosely typed. And they were pioneering a lot of the thought around automated testing.

The Fox community didn't have any testing frameworks or anything quite so fancy back then. But we could write simple applications that tested pieces of our applications. We could write functions that executed key pieces of the application and verified the behavior was still what we wanted. So that's what we did.

We didn't have comprehensive coverage (we didn't have code coverage metrics at all, but I can guarantee we weren't at 100%). We still spent a good deal of time manually testing our latest changes, but we wrote automated tests around the stuff that was prone to error, was being modified a lot, or was critical to the overall application.

These new standards along with the tests helped to significantly reduce the number of issues being found by docket clerks and get us back on track for continued rapid delivery.

### And then ...
No and then.

Well, okay, a little and then.

It took us about a year to complete the entire application. It had many more features then the original and worked exactly as they wanted it to. The application lived on for another decade before being replaced by a module in a commercial suite of legal firm management software.

As happens in life, Joe and I eventually drifted apart. We talked for a while about starting a software consultancy together, but I was young and impatient and left the law firm to find more exciting work. Soon thereafter, I started my own consultancy and Joe and I talked less and less.

Over the years, I expanded on the things I learned in those early days. In 1999, with an introduction to eXtreme Programming (XP), I felt I'd found my tribe. I imagined that somewhere in that tribe was Joe Sladick, but I never did see him again.

From XP to Scrum to Agile to Lean Startup to Design Thinking and on and on, I kept learning and applying new ideas where I could. Through all of it, many of those base lessons held true.

This book is an homage to Joe Sladick and the lessons I learned from him.

I owe a great many thanks to those who have helped me along the way, but Joe was the first. He was the first in a long line of mentors and friends who taught me new things by their instruction, example, and argument. And some of them, like Joe, made me feel like maybe, just maybe, I could do that too.

The 7 Rules are not really my own. I believe them to be merely my articulation of what I've learned from others like Joe. People who, like me, enjoy doing this and want to share what they know with others. People who are are uncovering better ways of developing software by doing it and helping others do it[^AgileManifesto].

[^AgileManifesto]: Beck, K., Beedle, M., Van Bennekum, A., Cockburn, A., Cunningham, W., Fowler, M., . . . Thomas, D. (2001). Manifesto for Agile Software Development. Retrieved from https://agilemanifesto.org/

May the 7 Rules serve you well.

