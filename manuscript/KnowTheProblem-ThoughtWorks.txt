Around 2009, I was working for ThoughtWorks and helping to lead a large re-write for a leader in the airline industry. The airline had their own in-house development staff complete with architects, designers, project managers, and software developers. While they'd contracted to us for this significant effort, they kept their teams very active in the process - something we welcomed from our clients.

Their commerce website was key to their business strategy. They weren't going to let this project fail. Prior to engaging us, their team had done a great deal of discovery and design. They had a comprehensive architecture design and a backlog of prioritized stories detailed with functional specifications and high-fidelity screen prototypes. The re-write was to take two years to complete and would then replace the old system all at once.

As you might imagine, this wasn't the way ThoughtWorks operated. We convinced them to do the job iteratively and incrementally. We'd tease out and replace aspects of the software while leaving the rest of it in place. No grand ta-da after a multi-year effort. We'd start delivering working software and real value in the first few of weeks and every week, if not multiple times per week, thereafter.

We decided to start with the booking flow as this was not only where the majority of customer complaints came from, but it had a direct impact on revenue. Over the past year, abandonment rates were increasing on the site and calls to central booking were increasing. Quite simply - customers booking flights through a central booking agent was more expensive to the company than customers booking flights online.

The primary issue with the booking flow was response times. The site often took over a minute to display a listing of flight options. The listing showed departure and arrival times, flight duration, and tickets available. If you wanted to see details such as the location and length of a layover, you had to click on the flight and wait for another screen to load. If you didn't like the layover, you had to return to the search, which would take another minute or more to display. Booking flights often took thirty minutes or more for a basic round-trip fare. It took less than 10 minutes to book the same flight through an agent. Quite simply - booking flights through a central booking agent was faster and easier than booking flights online.

As this was a critical piece of the solution, the client's designs around this were quite detailed.

We were presented with a set of pixel-perfect screen flows showing every conceivable interaction on the screen, including failure cases and messages. In some cases, informational messages caused the entire screen to shift up or down by a couple of pixels. Some error messages caused the screen to shift by several lines of text. The flight listings themselves were identical to the existing design, except now when you clicked on a flight, you got an accordion effect that opened up and showed some additional details like the layover city and duration. Flights that didn't have a layover didn't have the accordion details. This seemed like a potentially frustrating user interface where the screen would randomly shift around and some but not all listings had an accordion.

There were specifications for how messages were to be constructed, including how the template messages were to be stored. For example, we could take the template string "Welcome Back \{NAME\}!" and inject the customer name in the designated spot to get "Welcome Back John Smith!". Their model, however, didn't use "\{NAME\}", it used "\{Table.Field\}" where Table indicated the name of the database table and Field indicated the name of the field in that table. For example, "Welcome Back \{Customers.givenmame\} \{Customers.familyname\}!" This seemed like a particularly brittle design. It meant that all database schema changes had the potential to break the system in strange and potentially un-testable ways. It also meant that formatting decisions based on region, such as whether or not given name was displayed first or last were going to be much more difficult to implement and maintain. Finally, it meant that whomever was word-smithing the messages had to also be familiar with the layout of the databases.

Speaking of database schema changes breaking the system - they had a way of mitigating that risk. They presented us with a complete database schema - every table, every field, every relationship, and every view was detailed along with the recommended code for several stored procedures. Their data team was at the ready to go over the details with us. If we had any reasonable suggestions for change, they'd review them and get back to us with any approved updates. The turn around time on change reviews was no more than 3 working days.

We were to review the change procedures and controls and sign off that we understood that once development began, schema changes would not be allowed except for under special circumstances. Pre-designing the database and blocking all future changes was one way to ensure the schema didn't break things. But it also meant that we couldn't very well respond to change. Any new functionality requests that required a change to a database would take several days and more likely weeks to get approved. Most likely, there would be a compromise and rather than updating the databases in an optimal way, hacks would be used to get the job done with minimal disruption.

For example, rather than adding a middle name to the customer table, which would cause a potentially breaking schema change, we might end up creating a MiddleName table that indicated which customer this middle name belonged to. Of course, middle name seems ridiculous, but compromises like this happen all the time for things like items and orders. Over time these compromises result in a Frankenstein schema that then cascades its oddities into the code itself.

Finally, was their object model. This too was quite detailed. They'd pre-designed the objects and documented them all via UML (Unified Modeling Language). The fields, methods, inheritance, and interfaces were all laid out for us to implement. For the most part, the object model looked a great deal like the database schema. For each table, there was a corresponding object where the fields in the table matched the fields on the objects.

A> Classes are templates that define properties and behavior. Objects are instances of classes that have state and can be manipulated. For simplicity, I am referring to both as objects.

It's common for teams to design their object model to reflect the database schema. On the surface, this makes sense. Data comes from the database, gets manipulated, and gets written back to the database. If the database has a URL field to hold the address of a web site, then the object should also have a URL field. Get data from the database and put it in an object, update the data in the object, write the object data back to the database - simple. This is such a common practice, that there are tools and libraries that developers can use which automate the process of mapping database fields to object fields.

"If it both makes sense and is very common, what is the problem?"", You might ask.

Good question.

The first problem we've already identified. If there are weird compromises that come about when we later realize we need to change the database schema, those weird compromises often find themselves now reflected in the object model.

The second problem, and perhaps an underlying issue, is that a database is for storing data and an object is for acting on that data. A database, no matter how robust, has a limited means of representing data. There are ways of storing numbers that account for the size of the number, the signature (plus or minus), and whether or not it has decimals. There are ways of storing text that account for the length and whether or not it needs to allow for extended characters such as emojis. There are ways of storing dates and times that take timezones into consideration. And there are ways of storing large binary documents - like photos and PDF files. That's about it. If we map the database too tightly to the object model, we are bound by the limits of the database.

To make this more clear - let's focus on that URL for a moment.

A URL is a Uniform Resource Locator[^URL]. A web address, like https://www.google.com/, is a common form of URL. To most of us, a URL looks like text. It is a string of characters. Technically, a URL is made up of alpha characters, digits, and a select few special characters such as plus (+), period (.), hyphen (-), and ampersand (&).

[^URL]: Berners-Lee, Tim. “URL Specification.” Uniform Resource Locators, 1995. https://www.w3.org/Addressing/URL/url-spec.html.

Now, in the database model, each customer company had a String field for holding the URL of the company's website. The same was true in the object model. Each Customer object has a URL String field.

But this was a mistake - or at least a poor design decision. A URL can be represented as a String, but in reality a URL has more information and specific attributes that are not easily accessible when we think of it as simply a string.

Let's look at the following URL:

https://www.google.com/search?q=URL+Specification


At the start of the URL, there is the scheme. The scheme is a series of characters followed by a colon. In this case, our scheme is "https", indicating this is a hypertext transfer protocol with security. Other common schemes include file transfer protocol (ftp) and email (mailto). Each scheme has its own set of rules for how the rest of the URL can be formatted. For example, https allows for an optional username and password in the URL, whereas mailto does not.

The https scheme has several possible components. Following the scheme is the host. An https host always begins with a double slash ("//") and ends at the first single slash ("/"). In this case, our host is "www.google.com".

Following the host is the path. In our case, the path is "search". The path begins at the first single slash and continues until either the end of the URL or a question mark ("?").

The last part of our example https URL is the query string. Query strings are optional for an https URL. In our case, the query string is "q=URL+Specification". Google parses this query string and turns it into a search for "URL Specification".

There are other optional elements of an https URL that we didn't include in our example, such as username, password, and port.

By making the URL a String field in the Customer object, developers were forced to put the logic for validating a URL either into the Customer object itself or in a separate object whose job was to reason about the URL String.

In our object model, we want to be able to more accurately represent a URL. Rather than using a String, we want to create and use a URL object. The URL object would then encapsulate the URL rules, such as ensuring the URL is not too long, the URL has a valid scheme and host, and the URL query string looks safe. This keeps the code for URLs together in one place. It also allows us to have different type of URLs through an inheritance model. This way, the rules that apply to all URLs would be contained in the base object and the rules specific to each type of URL would be stored in the appropriate object.

{alt: "A simplified UML model of a URL base class and subclasses"}
![Example URL class model](resources/images/url_uml.png)


*** PICK UP HERE ***

So there we were with detailed screen designs, message standards, database schemas, and object models - all intended to help prevent any future problems. They'd done everything they could to mitigate future problems. Knowable future problems.

What they hadn't accounted for in the design was the unknown and the unknowable. Or more accurately stated, in an effort to try to account for everything they could think of, they'd made a design that was so rigid, it couldn't very well accommodate what they didn't think of.


√ Customer provided detailed designs of screens, architecture, database schemas, and the object model.
* Design accounted for one way, round trip, multi-stop, open-ended, children, pets, and other special circumstances
* Decided to start simple and build as we needed with the detailed design as a guide, but not a requirement
* In September 2009 - learned new security measures were being put into place by the TSA, effective January 2010 [^TSARegs].
* Were able to get new passenger identification requirements in place


[^TSARegs]: “Air Travel Rules FAQ.” Findlaw, June 21, 2016. https://www.findlaw.com/consumer/travel-rules-and-rights/air-travel-rules-faq.html.
