{#works_in_small_steps}
# Works In Small Steps

{blurb, icon: bullhorn}
When they build complex solutions out of simple components, they do it in small steps. They focus on the next simplest thing that can be done. They [don't solve problems they don't yet have]{#current_problem}. They are obsessed with creating value, offering options, and learning.
{/blurb}

{blurb, icon: quote-left}
The most fundamental problem in software development is complexity. There is only one basic way of dealing with complexity: divide and conquer.

C> -- Bjarne Stroustrup
{/blurb}

{pagebreak}

When we have grand plans, it can be a challenge to work in small steps. The more enamoured we allow ourselves to become with our ideas, the harder it is to let any of them go.

But if we want to deliver sooner, we necessarily have to deliver less. I mean, you're not planning to shove garbage our there and call it an MVP, are you?

Right. I didn't think so.

Now, if we are going to deliver less (because garbage is not an option), we should make sure what we're delivering is the next most useful thing. I used to say, "the next most valuable thing", but I now think that is either too myopic or at least a poor articulation.

You see, when we say valuable, lots of folks think that means something the customer will use with delight. You know, visible features. Stuff the customer will fawn over on social media. Other folks think valuable means an OKR or an MBO is completed. There are still others who think valuable means money is earned.

Features the customer fawns over are wonderful and earning money is generally good for business. Heck, even ticking off an OKR can be rewarding. But if we focus only on features customers can immediately see and hitting business targets, we lose some extremely valuable opportunities. Opportunities to expand our options and opportunities to learn. Options and learning better set us up for future fawnable fortune-generating features.

Seriously. Options and learning are egregiously overlooked in most backlogs - And they can be incredibly useful, even extremely valuable (depending on the measure of valuable).

## Options

Actions that expand our future possibilities.
Actions that move us in a direction, but leave alternate paths open for longer.


## Learning
Actions that help us to gain insights.
Actions that confirm or disprove a hypothesis.


THINGS TO (possibly) ANSWER IN THIS SECTION
* Small, independently deliverable
* Prioritizing for Value, Options, and Learning
* Slicing guidelines
  * Avoid
    * Slicing along architectural seams
    * Slicing along organizational seams
  * Try
    *
* complexity
  * Cynefin
  * simplicty
* Incremental Development
  * BDD
  * TDD
  * Example Mapping

Slicing Resorces:

[Story Splitting Map](https://3p72t53zzqr23puj171gfblg-wpengine.netdna-ssl.com/wp-content/uploads/2020/12/Story-Splitting-Flowchart.pdf)

[Dinwiddie Suggestions](http://idiacomputing.com/pub/UserStories.pdf)

[Bill Wake](https://xp123.com/articles/twenty-ways-to-split-stories/)

[JB Rainsberger](https://blog.jbrains.ca/permalink/how-youll-probably-learn-to-split-features)

[InfoQ Article](https://www.infoq.com/news/2011/04/how-to-split-user-stories/)
