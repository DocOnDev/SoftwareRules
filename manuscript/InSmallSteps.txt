{#works_in_small_steps}
# Works In Small Steps

{blurb, icon: bullhorn}
When they build complex solutions out of simple components, they do it in small steps. They focus on the next simplest thing that can be done. They [don't solve problems they don't yet have]{#current_problem}. They are obsessed with creating value, offering options, and learning.
{/blurb}

{blurb, icon: quote-left}
The most fundamental problem in software development is complexity. There is only one basic way of dealing with complexity: divide and conquer.

C> -- Bjarne Stroustrup
{/blurb}

{pagebreak}

THINGS TO (possibly) ANSWER IN THIS SECTION
* Small, independently deliverable
* Prioritizing for Value, Options, and Learning
* Slicing guidelines
  * Avoid
    * Slicing along architectural seams
    * Slicing along organizational seams
  * Try
    *
* complexity
  * Cynefin
  * simplicty
* Incremental Development
  * BDD
  * TDD
  * Example Mapping

Slicing Resorces:

[Story Splitting Map](https://3p72t53zzqr23puj171gfblg-wpengine.netdna-ssl.com/wp-content/uploads/2020/12/Story-Splitting-Flowchart.pdf)

[Dinwiddie Suggestions](http://idiacomputing.com/pub/UserStories.pdf)

[Bill Wake](https://xp123.com/articles/twenty-ways-to-split-stories/)

[JB Rainsberger](https://blog.jbrains.ca/permalink/how-youll-probably-learn-to-split-features)

[InfoQ Article](https://www.infoq.com/news/2011/04/how-to-split-user-stories/)
